# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# kubectl create secret generic strapi-secret \
#   --from-literal=username=<YOUR-DATABASE-USER> \
#   --from-literal=password=<YOUR-DATABASE-PASSWORD> \
#   --from-literal=database=<YOUR-DATABASE-NAME> \
#   -n mainnet

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: mainnet
  name: strapi-ingress
spec:
  defaultBackend:
    service:
      name: strapi-service
      port:
        number: 1337

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  namespace: mainnet
  name: strapi-backendconfig
spec:
  healthCheck:
    type: HTTP
    requestPath: /
    port: 1337
  timeoutSec: 3600
  connectionDraining:
    drainingTimeoutSec: 3600

---
apiVersion: v1
kind: Service
metadata:
  namespace: mainnet
  name: strapi-service
  labels:
    app: strapi
spec:
  type: NodePort
  selector:
    app: strapi
  ports:
    - port: 1337
      targetPort: 1337
      protocol: TCP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: mainnet
  name: strapi-deployment
spec:
  selector:
    matchLabels:
      app: strapi
  template:
    metadata:
      labels:
        app: strapi
    spec:
      serviceAccountName: subql-ksa
      containers:
      - name: strapi
        image: naskio/strapi
        env:
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_CLIENT
          value: "postgres"
        - name: DATABASE_HOST
          value: "127.0.0.1"
        - name: DATABASE_PORT
          value: "5432"
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: strapi-secret
              key: username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: strapi-secret
              key: password
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: strapi-secret
              key: database
        ports:
        - containerPort: 1337
      - name: cloud-sql-proxy
        # It is recommended to use the latest version of the Cloud SQL proxy
        # Make sure to update on a regular schedule!
        image: gcr.io/cloudsql-docker/gce-proxy:1.28.0 # make sure the use the latest version
        command:
          - "/cloud_sql_proxy"

          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          # - "-ip_address_types=PRIVATE"

          # By default, the proxy will write all logs to stderr. In some
          # environments, anything printed to stderr is consider an error. To
          # disable this behavior and write all logs to stdout (except errors
          # which will still go to stderr), use:
          - "-log_debug_stdout"

          # Replace DB_PORT with the port the proxy should listen on
          # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
          - "-instances=octopus-dev-309403:asia-east1:octopus=tcp:5432"
        securityContext:
          # The default Cloud SQL proxy image runs as the
          # "nonroot" user and group (uid: 65532) by default.
          runAsNonRoot: true
        # You should use resource requests/limits as a best practice to prevent
        # pods from consuming too many resources and affecting the execution of
        # other pods. You should adjust the following values based on what your
        # application needs. For details, see
        # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          requests:
            # The proxy's memory use scales linearly with the number of active
            # connections. Fewer open connections will use less memory. Adjust
            # this value based on your application's requirements.
            memory: "2Gi"
            # The proxy's CPU use scales linearly with the amount of IO between
            # the database and the application. Adjust this value based on your
            # application's requirements.
            cpu:    "1"
